alert(msg)  浏览器弹出警示框
console(msg) 浏览器控制台打印输出信息
prompt(info) 浏览器弹出输入框，用户可以输入

var 声明变量    variable变量   不确定属于哪种类型
变量数据类型只有程序在运行过程中，根据等号右边的值来确定
声明多个变量
var a=
    b=
    c=


数据类型
默认值         0     false     ""    undefined  null 
简单数据类型 Number, Boolean, String, Undefined, Null
0xffff 16进制
Infinity 无穷大  -Infinity 无穷小
NaN 非数字

isNaN()判断是否为非数字类型

字符串类型引号嵌套
JS可以用单引号嵌套双引号，或者用双引号嵌套单引号

转义符
\n          换行符
\\          \
\'          '
\"          "
\t          tab缩进
\b          空格blank

Boolean类型参与计算 true 为 1， false 为 0
undefined 和数字相加结果是NaN，和字符串相加是为字符相加
null 数学相加是为0，和字符相加为字符相加


数据；类型转换

toString()
String() 强制转换
加号拼接的字符串都是字符串类型

parseInt(string)
parseFloat(string)
Number(string)强制转换
js隐式转换(- * /)  利用算术运算隐式转换为数值型 '12'-0

Boolean() 其他类型转换成布尔值



自增运算

后自增
先返回原值后加1

前自增
自加1再返回值

<       
>
>=
<=
==      会转型 默认转换数据类型
!=
===     全等 要求值和数据类型都一致
!==

逻辑运算符

&&      与      短路运算    如果第一个表达式的值为真，则返回表达式2.如果第一个表达式为假，则返回表达式1
||      或      如果表达式1 结果为真 则返回的是表达式1  如果表达式1为假则返回表达式2
!       非

分支
if
if else
switch

循环
for
while
do while

断点
再浏览器中运行 ---》source ----》打断点 ---》刷新 ----》step into / watch看参数


创建数组
var arr = new Array();
var arr = [];


声明函数
function 函数名(){

}

function 函数名(形参1, 形参2...){

}

调用函数
函数名();
函数名(实参1, 实参2...);

如果实参的个数多于形参的个数，会取到形参的个数
如果实参的个数小于形参的个数，
形参可以看作是不用声明的变量 
一个变量没有接收值 结果就是undefined   
数值+undefined ---》NaN


return语句
最终的结果需要返回给函数的调用者 函数名() = return的结果
终止函数
只能返回一个值 多个值的情况返回最后一个值


函数声明方式

1.利用函数关键字自定义函数(命名函数)
    function fun(){

    }
    fun();

2.函数表达式(匿名函数)

var 变量名 = function(){};
变量名();

函数表达式声明方式跟变量差不多，
只不过变量里面存的是值 
而 函数表达式里面存的是函数


作用域
就是代码名字(变量)在某个范围起作用和效果 目的是为了提高程序的可靠性
更重要的是减少命名冲突

全局作用域  整个script标签或者是一个单独的js文件

局部作用域  函数作用域  在函数内部就是局部作用域 这个代码的名字只在函数内部起作用

全局变量  在全局作用域下的变量

局部变量  子啊局部作用域下的变量  

ES6 新增块级作用域
if (3 < 5){
    var num = 10;
}
console.log(num);
num可调用

内部函数可以访问外部函数变量
作用域链：内部函数访问外部函数的变量采取的是链式查找的方式
来决定那个值这种结构称为作用域链    就近原则


js引擎运行机制  预解析 代码执行
    预解析  js引擎会把js里面所有的var 还有function提升到当前作用域的最前面
    代码执行    按照代码书写的顺序从上往下执行

预解析  分为变量预解析(变量提升)和函数预解析(函数提升)
    变量提升    就是把所有的变量声明提升到当前的作用域最前面 
        不提升赋值操作 (不进行赋值操作)
        声明提前 ，赋值操作顺序不变
    
    函数提升    就是把所有的函数声明提升到当前作用域的最前面 
                不调用函数


直接赋值 没有var声明 当全局变量看


创建对象

1.利用对象字面量创建对象 {}
    var obj = {};
    var obj = {
        userName:' ',
        age:' ',
        sayHi: function(){         //方法冒号后面跟的是一个匿名函数
            console.log('hi~');
        }

    }

    console.log(obj.userName);
    console.log(obj['age']);
    obj.saiHi();

    变量和属性的而相同点 他们都是用来存储数据的

    变量    单独声明并赋值  使用的时候直接写变量名 单独存在
    属性    在对象里面的不需要声明的  使用的时候必须是对象.属性

    函数和方法的相同点都是实现某种功能 做某件事

    函数是单独声明 并且调用的 函数名() 单独存在的
    方法 在对象里面 调用的时候 对象.方法()

2.利用new Object 创建对象
    var obj = new Object();
    obj.userName = ' ';
    obj.age = ' ';
    obj.sayHi = function(){
        console.log('Hi');
    }

3.利用构造函数创建对象
    function 构造函数名(){
        this.属性 = 值;
        this.方法 = function(){}
    }

    new 构造函数名();

构造函数名字首字母要大写 规范
不需要return就可以返回结果
必须需要使用 new

    function Star(userName,age,sex){
        this.name = userName;
        this.age = age;
        this.sex = sex;
        this.sing = function(song){
            console.log(song)
        }
    }

    var ldh = new Star('sss',12,'m');
    ldh.sing('sang');

构造函数 泛指某一大类
对象 一个具体的事物
创建对象的过程      实例化

new关键字执行过程
1.new构造函数可以在内存中创建一个空的对象
2.this就会指向刚才创建的空对象
3.执行构造函数里面的代码 给这个空对象添加属性和方法
4.返回这个对象

for(var k in obj){
    console.log(k); 变量输出得到的是 属性名
    console.log(obj[k]); obj[k] 得到的是属性值
}



对象    自定义对象，内置对象，浏览器对象

内置对象 js自带的一些对象 Math ，Date，Array，String


添加数组
Array.push() 在后面添加
Array.unshift() 在前添加
Array.pop() 删除最后一个元素
Array.shift() 删除数组第一个元素
Array.reverse() 翻转
Array.sort(function(a,b){
    //return b-a;  降序排序
    return a-b; 升序排序

}) 排序

Array.indexOf('') 从前开始查找
Array.lastIndexOf('') 从后开始查找


数组转换为字符串
toString()
join()  分割字符默认用  ','  数组转换为字符串

contact() 连接两个数组，不影响原数组
slice() 数组截取 slice(begin, end)
splice() 数组删除splice(第几个开始，要删除的个数)


//字符串不可变 不要大量的拼接字符串

字符串

charAt(index)
charCodeAt(index)
str[index]

contact(str1,str2,str3...)
substr(start,length)
slice(start,end)
substring(start,end)

replace(str1,str2)
indexOf()
split('分隔符')  字符转换为数组

toUpperCase()  转大写
toLowerCase()  转小写


简单数据类型  放在栈里
String，Number，Boolean，Undefined，Null  null返回的是一个空的对象

复杂数据类型 引用类型 放在堆里
通过New关键字创建的对象，Object，Array，Data